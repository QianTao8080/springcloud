1.@AutoWrire和@Resource的区别
    AutoWrite是根据类型去容器里找bean,如果找到一个则直接返回，如果找到多个，则根据名字再筛选
    Resource则是根据名字去找。如果找到多个则报错
2.spring循环依赖
    1)产生原因：
        @Component
        public class A{

            @AutoWrite
            private B b;
        }

        @Component
        public class B{

            @AutoWrite
            private A a;
        }
    在初始化A时，要填充属性B，然后去容器里找B，没找到，则要初始化B，初始化B时，又要填充属性A，此时A还没初始化完，容器里找不到，则又要去初始化A，这就造成了循环引用
    2）spring通过预创建set、单例池、二次缓存、三级缓存解决了循环依赖(解决了大部分的)。
        <1>一级缓存(单例池):singletonObjects 就是对象初始化完之后就会放到单例池里。
        <2>二级缓存：earlySingletonObjects 放的是实例化之后初始化完成之前的bean，是为了放提前AOP的未完全初始化好的bean对象(代理对象)，为啥要提前AOP呢，
                   因为如果不提前AOP，那B对象那里的引用的A对象是普通对象，而A初始化完就会往单例池里放代理对象，这样就不一致了。所以得提前AOP
        <3>三级缓存: 存放的是未初始化结束的A对象的一个lambda表达式，用来判断返回AOP代理对象还是A对象

    3）完整过程:
        <0>要创建A了，预处理set  creatingSet<> 把A放进去。
        <1>实例化A，把A放进三级缓存
        <2>填充属性B--->单例池里找--->creatingSet<>找--->创建B对象
            <2.0>creatingSet.add(B)
            <2.1>初始化B
            <2.2>填充A--->单例池里找--->createSet<>找到A说明发生循环引用了--->循环引用--->二级缓存里找，看有没有创建好的
                 --->没有则到三级缓存里找--->三级缓存找到，执行lambda方法 --->把生成的bean放到二级缓存，并赋值给B
            <2.3>填充其他属性
            <2.4>其他步骤(AOP)
            <2.5>放入单例池
        <3>填充其他属性
        <4>其他步骤(AOP)
        <5>放入单例池
        <6>creatingSet.remove(A)，二级缓存、三级缓存中删除A

3.注意区分实例化和初始化
    实例化：创建对象
    初始化：给各个属性赋值
